name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.13]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Run linting checks
      run: |
        echo "🔍 Running code style checks..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Run test suite
      run: |
        echo "🧪 Running test suite..."
        python run_tests.py
    
    - name: Run tests with pytest (alternative)
      run: |
        echo "🧪 Running tests with pytest..."
        python -m pytest test_bot.py -v --tb=short
    
    - name: Generate coverage report
      run: |
        echo "📊 Generating coverage report..."
        python -m pytest test_bot.py --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage
        retention-days: 30

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
    
    - name: Check for vulnerable dependencies
      run: |
        echo "🔍 Checking for vulnerable dependencies..."
        pip-audit --format json --output pip-audit-report.json || true
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: pip-audit-report.json
        retention-days: 30

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [test, security, dependency-check]
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success' && needs.security.result == 'success' && needs.dependency-check.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Flyctl
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to Fly.io
      run: flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, security, dependency-check, deploy]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.dependency-check.result }}" == "success" ]]; then
          echo "✅ All CI checks passed successfully!"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "🚀 Ready for Fly.io deployment"
          else
            echo "🔍 Branch is not main, skipping deployment"
          fi
        else
          echo "❌ Some CI checks failed"
          echo "🔍 Check the failed jobs above for details"
          exit 1
        fi
    
    - name: CI Summary
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.dependency-check.result == 'success'
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "📊 Test Results: ✅ PASSED"
        echo "🔒 Security Checks: ✅ PASSED"
        echo "📦 Dependency Checks: ✅ PASSED"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "🚀 Fly.io deployment completed successfully!"
        else
          echo "🔍 Branch is not main, no deployment needed"
        fi
