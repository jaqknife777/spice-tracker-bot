name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11, 3.13]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black
        pip install alembic

    - name: Run linting checks
      run: |
        echo "🔍 Running code style checks..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Test database migrations
      run: |
        echo "🗄️ Testing database migrations..."
        # Set up test database URL
        export DATABASE_URL="sqlite:///test_migrations.db"

        # Test migration generation (should not create new migrations)
        python migrate.py status

        # Test migration application
        python migrate.py apply

        # Test migration rollback
        python migrate.py rollback

        # Test migration re-application
        python migrate.py apply

        echo "✅ Database migrations working correctly"

    - name: Run comprehensive test suite
      run: |
        echo "🧪 Running comprehensive test suite..."
        pytest tests/ -v --cov=. --cov-report=term-missing --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run basic validation
      run: |
        echo "🧪 Running basic validation..."
        python -c "import database_orm; print('✅ Database ORM module imports successfully')"
        python -c "from utils.embed_builder import EmbedBuilder; print('✅ Utils modules import successfully')"
        python -c "from commands import COMMAND_METADATA; print('✅ Commands package imports successfully')"
        python -c "import alembic; print('✅ Alembic migration system available')"
        echo "✅ All core modules validated"

    - name: Check bot syntax
      run: |
        echo "🔍 Checking bot syntax..."
        python -m py_compile bot.py
        python -m py_compile database_orm.py
        python -m py_compile migrate.py
        echo "✅ All Python files compile successfully"

    - name: Upload validation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-results-${{ matrix.python-version }}
        path: |
          .flake8
          coverage.xml
        retention-days: 30

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Check for vulnerable dependencies
      run: |
        echo "🔍 Checking for vulnerable dependencies..."
        pip-audit --format json --output pip-audit-report.json || true

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: pip-audit-report.json
        retention-days: 30

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, security, dependency-check]
    if: always()

    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.dependency-check.result }}" == "success" ]]; then
          echo "✅ All CI checks passed successfully!"
          echo "🔍 All validation, security, and dependency checks completed"
        else
          echo "❌ Some CI checks failed"
          echo "🔍 Check the failed jobs above for details"
          exit 1
        fi

    - name: CI Summary
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.dependency-check.result == 'success'
      run: |
        echo "🎉 CI Pipeline completed successfully!"
        echo "📊 Test Results: ✅ PASSED"
        echo "🔒 Security Checks: ✅ PASSED"
        echo "📦 Dependency Checks: ✅ PASSED"
        echo "🔍 All checks completed - ready for manual deployment"
